#version 450
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_bindless_texture : enable

#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_image_load_store : enable
#line 9 "D:/Jarvis/workspace/Simul/4.3/Simul/build/Platform/OpenGL/sfx_intermediate/index_CS_UpdateIndex_c.glsl"
#define GLSL 1
#define SFX 1
#define SFX_GLSL 1
#define SFX_OPENGL 1
#define SFX_TYPED_UAV_LOADS 1
#define uint64_t uvec2
#pragma warning(disable:1)
#line 87 "D:/Jarvis/workspace/Simul/4.3/Simul/Shaders/SL/cloud_constants.sl"
layout(std140, binding = 13) uniform CloudPerViewConstants
{
	uvec4 targetRange[6];
	mat4 shadowMatrix;
	mat4 worldToScatteringVolumeMatrix;
	mat4 volumeToLayerMatrix;
	vec4 depthToLinFadeDistParams;
	vec3 scaleOfGridCoordsKm;
	int halfClipSize;
	vec3 gridOriginPosKm;
	int cubemapViewIndex;
	vec3 viewPosKm;
	float sampleHeight;
	float shadowRangeKm;
	int shadowTextureSize;
	int raytraceSteps;
	int cubemapTargetIndex;
	ivec3 amortizationOffset;
	float exposure;
	uvec2 targetTextureSize;
	uvec2 edge;
	uvec3 amortizationScale;
	float maxCloudDistanceKm;
	uvec4 cubemapFaceIndex[6];
	vec3 scale;
	float cloud_interp;
	vec3 offset;
	float azimuth;
	vec3 mapScale;
	int initialSteps;
	vec3 mapOffset;
	uint stepPos;
	ivec2 gridBackCornerTexel;
	ivec2 gridCentreTexel;
	ivec4 exclusionRange;
	vec2 cirrusWindVector;
	int thicknessSteps;
	float initialVolumeMultiplier;
	vec3 cloudTintColour;
	float windowScaleKm_X;
	uvec3 windowGrid;
	int firstInput;
};

layout(rgba32f, binding = 0) uniform image2D cloudIndex;
layout(std140, binding = 0) uniform _TextureHandles_
{
	uint64_t cloudDensity[24];
};
shared vec4 contribution[64];
#line 15 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/OpenGL/GLSL/shader_platform.sl"
float saturate(float value)
{
return clamp(value,0.0,1.0);
}
#line 16 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/OpenGL/GLSL/shader_platform.sl"
vec2 saturate(vec2 vvalue)
{
return clamp(vvalue,vec2(0.0,0.0),vec2(1.0,1.0));
}
#line 17 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/OpenGL/GLSL/shader_platform.sl"
vec3 saturate(vec3 vvalue)
{
return clamp(vvalue,vec3(0.0,0.0,0.0),vec3(1.0,1.0,1.0));
}
#line 18 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/OpenGL/GLSL/shader_platform.sl"
vec4 saturate(vec4 vvalue)
{
return clamp(vvalue,vec4(0.0,0.0,0.0,0.0),vec4(1.0,1.0,1.0,1.0));
}
#line 138 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/Shaders/SL/colour_packing.sl"
vec4 PackVec4ToUint(vec4 a)
{
return a;
}
layout(local_size_x=8, local_size_y=8, local_size_z=1) in;
void main()
{
uvec3 g = gl_WorkGroupID;
uvec3 t = gl_LocalInvocationID;
#line 25 "D:/Jarvis/workspace/Simul/4.3/Simul/Shaders/SFX/index.sfx"
vec4 min_max=vec4(1000.0,-1000.0,0,0);
uvec3 pos=g*8+t;
for(int i=0;i<128;i++)
{
if(i==int(windowGrid.z))break;
pos.z=i;
float dens=texelFetch(sampler3D(cloudDensity[0]),ivec3(pos).xyz,0).z;
if(dens>0)
{
float h1=float(i)/float(windowGrid.z);
float h2=float(i+1)/float(windowGrid.z);
min_max.x=min(min_max.x,h1);
min_max.y=max(min_max.y,h2);
}

}

contribution[t.x+t.y*8]=min_max;
barrier();
if(t.x*t.y==0)
{
min_max=vec4(1000.0,-1000.0,0,0);
for(int i=0;i<64;i++)
{
vec4 h=contribution[i];
min_max.x=min(min_max.x,h.x);
min_max.y=max(min_max.y,h.y);
}

imageStore(cloudIndex,ivec2(g.xy),vec4(PackVec4ToUint(saturate(min_max))));
}

}