#version 450
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_bindless_texture : enable

#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_image_load_store : enable
//#line 9 "D:/Jarvis/workspace/Simul/4.3/Simul/build/Platform/OpenGL/../OpenGL/sfx_intermediate/spherical_harmonics_CS_Clear_c.glsl"
#define GLSL 1
#define SFX 1
#define SFX_GLSL 1
#define SFX_OPENGL 1
#define SFX_TYPED_UAV_LOADS 1
#define uint64_t uvec2
#pragma warning(disable:1)
layout(std140, binding = 10) uniform SphericalHarmonicsConstants
{
	int num_bands;
	int sqrtJitterSamples;
	int numJitterSamples;
	float invNumJitterSamples;
	uvec3 lookupOffset;
	int randomSeed;
	uvec2 lookupSize;
	uint numCoefficients;
	int padshc;
};
layout(std430, binding = 0) buffer targetBuffer_ssbo
{
	vec4 targetBuffer[]; 
};
layout(local_size_x=16, local_size_y=1, local_size_z=1) in;
void main()
{
uvec3 g = gl_WorkGroupID;
uvec3 t = gl_LocalInvocationID;
//#line 1218 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/Shaders/Sfx/spherical_harmonics.sfx"
uvec3 sub_pos=g*16+t;
if(sub_pos.x>=(numCoefficients))return ;
targetBuffer[sub_pos.x]=vec4(0,1,0,0);
}#version 450
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_bindless_texture : enable

#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_image_load_store : enable
//#line 9 "D:/Jarvis/workspace/Simul/4.3/Simul/build/Platform/OpenGL/../OpenGL/sfx_intermediate/spherical_harmonics_CS_Encode_c.glsl"
#define GLSL 1
#define SFX 1
#define SFX_GLSL 1
#define SFX_OPENGL 1
#define SFX_TYPED_UAV_LOADS 1
#define uint64_t uvec2
#pragma warning(disable:1)
layout(std140, binding = 10) uniform SphericalHarmonicsConstants
{
	int num_bands;
	int sqrtJitterSamples;
	int numJitterSamples;
	float invNumJitterSamples;
	uvec3 lookupOffset;
	int randomSeed;
	uvec2 lookupSize;
	uint numCoefficients;
	int padshc;
};
struct SphericalHarmonicsSample
{
	vec3 dir;
	float dummy3;
	vec4 lookup;
	float coeff[16];
};

layout(std430, binding = 0) buffer targetBuffer_ssbo
{
	vec4 targetBuffer[]; 
};
layout(std430, binding = 2) buffer samplesBuffer_ssbo
{
	SphericalHarmonicsSample samplesBuffer[]; 
};
layout(std140, binding = 0) uniform _TextureHandles_
{
	uint64_t cubemapTexture[24];
};
shared vec4 contribution[16];
layout(local_size_x=1, local_size_y=16, local_size_z=1) in;
void main()
{
uvec3 g = gl_WorkGroupID;
uvec3 t = gl_LocalInvocationID;
//#line 1265 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/Shaders/Sfx/spherical_harmonics.sfx"
uvec3 sub_pos=uvec3(g.x,t.y,0);
sub_pos.x=min(8,sub_pos.x);
const float weight=4.0*3.1415926536;
float factor=weight*invNumJitterSamples;
vec4 contrib=vec4(0,0,0,0);
if(sub_pos.y<16)
{
SphericalHarmonicsSample shs=samplesBuffer[sub_pos.y];
vec4 colour=textureLod(samplerCube(cubemapTexture[1 + 4]),shs.dir,0);
;
contrib=factor*shs.coeff[sub_pos.x]*colour;
}

contribution[sub_pos.y]=contrib;
barrier();
if(sub_pos.x>=(numCoefficients))return ;
if(sub_pos.x>8)return ;
if(sub_pos.y==0)
{
vec4 total=vec4(0,0,0,0);
for(int i=0;i<16;i++)
{
total+=contribution[i];
}

total.w=35.0;
targetBuffer[sub_pos.x]=total;
}

}#version 450
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_bindless_texture : enable

#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_image_load_store : enable
//#line 9 "D:/Jarvis/workspace/Simul/4.3/Simul/build/Platform/OpenGL/../OpenGL/sfx_intermediate/spherical_harmonics_CS_Jitter_c.glsl"
#define GLSL 1
#define SFX 1
#define SFX_GLSL 1
#define SFX_OPENGL 1
#define SFX_TYPED_UAV_LOADS 1
#define uint64_t uvec2
#pragma warning(disable:1)
layout(std140, binding = 10) uniform SphericalHarmonicsConstants
{
	int num_bands;
	int sqrtJitterSamples;
	int numJitterSamples;
	float invNumJitterSamples;
	uvec3 lookupOffset;
	int randomSeed;
	uvec2 lookupSize;
	uint numCoefficients;
	int padshc;
};
struct SphericalHarmonicsSample
{
	vec3 dir;
	float dummy3;
	vec4 lookup;
	float coeff[16];
};

layout(std430, binding = 1) buffer samplesBufferRW_ssbo
{
	SphericalHarmonicsSample samplesBufferRW[]; 
};
layout(std140, binding = 0) uniform _TextureHandles_
{
	uint64_t cubemapTexture[24];
};
//#line 693 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/Shaders/Sfx/spherical_harmonics.sfx"
float rand(float c)
{
return fract(sin(dot(vec2(c,11.1*c),vec2(12.9898,78.233)))*43758.5453);
}
//#line 698 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/Shaders/Sfx/spherical_harmonics.sfx"
float rand(vec2 co)
{
return fract(sin(dot(co.xy,vec2(12.9898,78.233)))*43758.5453);
}
//#line 1012 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/Shaders/Sfx/spherical_harmonics.sfx"
float K(int l, int m)
{
const float kval[]={0.282094792,0.488602512,0.345494149,0.630783131,0.257516135,0.128758067,0.746352665,0.215453456,0.068132365,0.027814922,0.846284375,0.189234939,0.044603103,0.011920681,0.004214597,0.93560258,0.170816879,0.032281356,0.006589404,0.001553137,0.000491145,1.017107236,0.156943054,0.024814876,0.004135813,0.000755093,0.000160986,4.64727E-05,1.092548431,0.145997925,0.019867801,0.002809731,0.000423583,7.05972E-05,1.38452E-05,3.7003E-06,1.163106623,0.13707343,0.016383409,0.002016658,0.000260349,3.6104E-05,5.57096E-06,1.01711E-06,2.54279E-07,1.22962269,0.129613612,0.013816857,0.001507543,0.000170696,2.0402E-05,2.63389E-06,3.80169E-07,6.51985E-08,1.53674E-08,1.292720736,0.123256086,0.011860322,0.001163,0.000117481,1.23836E-05,1.38452E-06,1.67898E-07,2.28481E-08,3.70644E-09,8.28786E-10,1.352879095,0.117753011,0.010327622,0.000920058,8.39894E-05,7.93625E-06,7.85806E-07,8.28312E-08,9.50139E-09,1.22662E-09,1.89272E-10,4.0353E-11};
int idx=l*(l+1)/2+abs(m);
return kval[idx];
}
//#line 1101 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/Shaders/Sfx/spherical_harmonics.sfx"
float P(int l, int m, float x)
{
float pmm=1.0;
if(m>0)
{
float somx2=sqrt((1.0-x)*(1.0+x));
float fact=1.0;
for(int i=1;i<=m;i++)
{
pmm*=(-fact)*somx2;
fact+=2.0;
}

}

if(l==m)return pmm;
float pmmp1=x*(2.0*m+1.0)*pmm;
if(l==m+1)return pmmp1;
float pll=0.0;
for(int ll=m+2;ll<=l;++ll)
{
pll=((2.0*ll-1.0)*x*pmmp1-(ll+m-1.0)*pmm)/(ll-m);
pmm=pmmp1;
pmmp1=pll;
}

return pll;
}
//#line 1134 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/Shaders/Sfx/spherical_harmonics.sfx"
float SH(int l, int m, float theta, float phi)
{
const float sqrt2=sqrt(2.0);
float s=0.0;
if(m==0)s=K(l,0)*float(P(l,m,cos(theta)));else
if(m>0)s=sqrt2*K(l,m)*cos(m*phi)*P(l,m,cos(theta));else
s=sqrt2*K(l,-m)*sin(-m*phi)*P(l,-m,cos(theta));
return s;
}
layout(local_size_x=16, local_size_y=1, local_size_z=1) in;
void main()
{
uvec3 g = gl_WorkGroupID;
uvec3 t = gl_LocalInvocationID;
//#line 1227 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/Shaders/Sfx/spherical_harmonics.sfx"
uvec3 pos=g*16+t;
int i=int(pos.x);
if(i>=numJitterSamples)return ;
int r=i+randomSeed;
float x=(rand(vec2(r,23.2*r)));
float y=(rand(vec2(2.45*r,11.1*r)));
float theta=asin(2.0*x-1.0)+3.1415926536/2.0;
float phi=2.0*3.1415926536*y;
vec3 dir=vec3(sin(theta)*cos(phi),sin(theta)*sin(phi),cos(theta));
samplesBufferRW[i].dir=dir;
ivec2 lm[]={{0,0},{1,-1},{1,0},{1,1},{2,-2},{2,-1},{2,0},{2,1},{2,2},{3,-3},{3,-2},{3,-1},{3,0},{3,1},{3,2},{3,3}};
int n=0;
for(int j=0;j<16;j++)
{
if(j>=int(numCoefficients))break;
ivec2 p=lm[j];
float co=SH(p.x,p.y,theta,phi);
samplesBufferRW[i].coeff[j]=co;
}

samplesBufferRW[i].lookup=textureLod(samplerCube(cubemapTexture[1 + 4]),dir,0);
;
}#version 450
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_bindless_texture : enable

#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_image_load_store : enable
//#line 9 "D:/Jarvis/workspace/Simul/4.3/Simul/build/Platform/OpenGL/../OpenGL/sfx_intermediate/spherical_harmonics_CS_ProbeQuery_c.glsl"
#define GLSL 1
#define SFX 1
#define SFX_GLSL 1
#define SFX_OPENGL 1
#define SFX_TYPED_UAV_LOADS 1
#define uint64_t uvec2
#pragma warning(disable:1)
layout(std140, binding = 10) uniform SphericalHarmonicsConstants
{
	int num_bands;
	int sqrtJitterSamples;
	int numJitterSamples;
	float invNumJitterSamples;
	uvec3 lookupOffset;
	int randomSeed;
	uvec2 lookupSize;
	uint numCoefficients;
	int padshc;
};

layout(std430, binding = 0) buffer targetBuffer_ssbo
{
	vec4 targetBuffer[]; 
};
layout(std140, binding = 0) uniform _TextureHandles_
{
	uint64_t cubemapAsTexture2DArray[24];
};
layout(local_size_x=1, local_size_y=1, local_size_z=1) in;
void main()
{
uvec3 sub_pos = gl_GlobalInvocationID;
//#line 1302 "D:/Jarvis/workspace/Simul/4.3/Simul/Platform/Shaders/Sfx/spherical_harmonics.sfx"
ivec4 index=ivec4(sub_pos.xyz+lookupOffset,0);
vec4 result=texelFetch(sampler2DArray(cubemapAsTexture2DArray[0]),ivec3(index).xyz,int(index.z));
targetBuffer[sub_pos.y*lookupSize.x+sub_pos.x]=result;
}