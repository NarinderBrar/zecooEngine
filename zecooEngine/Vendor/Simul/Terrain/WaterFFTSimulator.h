/*
#ifndef _WATER_FFT_H
#define _WATER_FFT_H

#include "Simul/Terrain/WaterWaveletsSimulator.h"
#include "Simul/Terrain/Export.h"
#include "fft_512x512.h"
#include "Platform/CrossPlatform/Texture.h"
#include "Platform/CrossPlatform/Effect.h"

//#define CS_DEBUG_BUFFER
#define PAD16(n) (((n)+15)/16*16)

#ifdef _MSC_VER
	#pragma warning(push)
	#pragma warning(disable:4251)
#endif

namespace simul
{
	namespace terrain
	{

		SIMUL_TERRAIN_EXPORT_CLASS WaterFFTSimulator
		{
		public:
			WaterFFTSimulator(simul::terrain::globalWaterValues *s);
			~WaterFFTSimulator();

			void RestoreDeviceObjects(simul::crossplatform::RenderPlatform *r);
			
			void SetShader(crossplatform::Effect		*effect);
			void InvalidateDeviceObjects();
			// -------------------------- Initialization & simulation routines ------------------------
			// Update ocean wave when tick arrives.
			void updateDisplacementMap(simul::crossplatform::DeviceContext &deviceContext,float time);

			//Set displacement and gradient textures for bounded water objects
			//void setDisplacementGradientMaps(simul::crossplatform::Texture* displacement, simul::crossplatform::Texture* gradient, crossplatform::StructuredBuffer<vec2>* H0);

			// Texture access
			//crossplatform::StructuredBuffer<vec2> &GetFftInput();
			//crossplatform::StructuredBuffer<vec2> &GetFftOutput();
			//crossplatform::StructuredBuffer<vec2> &GetSpectrum();
			//crossplatform::Texture* getDisplacementMap();
			//crossplatform::Texture* getGradientMap();

			void setLocalWaterValues(simul::terrain::localWaterValues* waterValues);
			terrain::globalWaterValues *getGlobalWaterValues();


			bool initValuesChanged;

		protected:
			void EnsureTablesInitialized(simul::crossplatform::DeviceContext &deviceContext);
			simul::terrain::globalWaterValues *m_param;
			simul::terrain::localWaterValues *currentWaterValues;
			int gridSize;
			crossplatform::RenderPlatform *renderPlatform;
			crossplatform::Effect		*effect;
	
			// Displacement map
			simul::crossplatform::Texture *displacement;

			// Gradient field
			simul::crossplatform::Texture *gradient;

			// Initialize the vector field.
			void initHeightMap(simul::crossplatform::DeviceContext &deviceContext);

			// ----------------------------------- CS simulation data ---------------------------------
			// Initial height field H(0) generated by Phillips spectrum & Gauss distribution.
			crossplatform::StructuredBuffer<vec2>*	H0;
			// Angular frequency
			crossplatform::StructuredBuffer<float>	Omega;
			crossplatform::StructuredBuffer<vec2>	Choppy;

			// Height field H(t), choppy field Dx(t) and Dy(t) in frequency domain, updated each frame.
			crossplatform::ConstantBuffer<cbImmutable>		immutableConstants;
			crossplatform::ConstantBuffer<cbChangePerFrame>	changePerFrameConstants;
			crossplatform::ConstantBuffer<cbHeightmap>		heightmapConstants;
			// Height & choppy buffer in the space domain, corresponding to H(t), Dx(t) and Dy(t)
			crossplatform::StructuredBuffer<vec2>	dxyz;

			// FFT wrap-up
			Fft m_fft;
			float start_time;
			unsigned propertiesChecksum;
		};
	}
}
#ifdef _MSC_VER
	#pragma warning(pop)
#endif

#endif	// _WATER_FFT_H
*/